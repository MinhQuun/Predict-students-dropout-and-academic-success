import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_selection import chi2
from scipy.stats import chi2_contingency, f_oneway
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report
from imblearn.over_sampling import SMOTE
import warnings
warnings.filterwarnings('ignore')

@st.cache_data
def load_data():
    data = pd.read_csv("data.csv", sep=';')
    data.columns = [x.replace(' ', '_') for x in data.columns]
    return data

def section_1(data):
    st.subheader("1. X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu v√† b·∫•t th∆∞·ªùng trong t·∫≠p d·ªØ li·ªáu sinh vi√™n")

    st.markdown("### L√†m s·∫°ch d·ªØ li·ªáu")
    st.write(f"T·∫≠p d·ªØ li·ªáu c√≥ {data.shape[0]} d√≤ng v√† {data.shape[1]} c·ªôt.")

    st.write("**Ki·ªÉm tra gi√° tr·ªã thi·∫øu:**")
    st.dataframe(data.isnull().sum())
    st.markdown("*Kh√¥ng c√≥ gi√° tr·ªã NULL n√†o trong t·∫≠p d·ªØ li·ªáu.*")

    st.write("**Ki·ªÉm tra c√°c gi√° tr·ªã tr√πng l·∫∑p:**")
    duplicate = data[data.duplicated()]
    st.write(f"S·ªë d√≤ng tr√πng l·∫∑p: {len(duplicate)}")
    if not duplicate.empty:
        st.dataframe(duplicate)
    st.markdown("*Kh√¥ng c√≥ h√†ng tr√πng l·∫∑p n√†o trong t·∫≠p d·ªØ li·ªáu.*")

    st.markdown("### ThƒÉm d√≤ d·ªØ li·ªáu")
    st.write("**Th√¥ng tin c·ªôt d·ªØ li·ªáu:**")
    st.dataframe(data.dtypes)
    st.markdown("*C√≥ th·ªÉ th·∫•y ƒë∆∞·ª£c c√≥ 7 ki·ªÉu d·ªØ li·ªáu s·ªë th·ª±c, 29 s·ªë nguy√™n v√† 1 ki·ªÉu d·ªØ li·ªáu object.*")

    st.write("**Ph√¢n ph·ªëi bi·∫øn Target:**")
    labels = ['Graduate', 'Dropout', 'Enrolled']
    sizes = [data.Target[data['Target'] == 'Graduate'].count(),
            data.Target[data['Target'] == 'Dropout'].count(),
            data.Target[data['Target'] == 'Enrolled'].count()]
    explode = (0, 0.1, 0.1)
    fig1, ax1 = plt.subplots(figsize=(10, 6))
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
    ax1.axis('equal')
    plt.title("T·ª∑ l·ªá c·ªßa bi·∫øn Target", size=12)
    st.pyplot(fig1)
    st.markdown("*Kho·∫£ng 49,9% sinh vi√™n ƒë√£ t·ªët nghi·ªáp, 32,1% b·ªè h·ªçc v√† 17,1% ƒëang theo h·ªçc m·ªôt kh√≥a h·ªçc kh√°c.*")

    st.markdown("### X√°c ƒë·ªãnh ngo·∫°i lai")
    data_num = data.select_dtypes(include=['float64'])
    for col in data_num.columns:
        fig, axs = plt.subplots(1, 2, figsize=(12, 4))
        sns.histplot(data[col], kde=True, ax=axs[0], color='red')
        axs[0].set_title(f'Ph√¢n ph·ªëi {col}')
        sns.boxplot(x=data[col], ax=axs[1], color='green')
        axs[1].set_title(f'Boxplot {col}')
        st.pyplot(fig)
    st.markdown("*H·∫ßu h·∫øt c√°c ƒë·∫∑c tr∆∞ng ƒë·ªÅu ch·ª©a c√°c gi√° tr·ªã ngo·∫°i lai, ngo·∫°i tr·ª´ t·ª∑ l·ªá th·∫•t nghi·ªáp, l·∫°m ph√°t v√† GDP.*")

    st.markdown("### X·ª≠ l√Ω ngo·∫°i lai b·∫±ng IQR")
    cols_iqr = ['Previous_qualification_(grade)', 'Admission_grade',
                'Curricular_units_1st_sem_(grade)', 'Curricular_units_2nd_sem_(grade)']
    for col in cols_iqr:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        old_len = len(data)
        data = data[(data[col] >= Q1 - 3*IQR) & (data[col] <= Q3 + 3*IQR)]
        st.write(f"Lo·∫°i b·ªè ngo·∫°i lai trong {col}: {old_len} -> {len(data)} d√≤ng")

    st.write("**Th·ªëng k√™ sau khi x·ª≠ l√Ω ngo·∫°i l·ªá:**")
    st.dataframe(data[cols_iqr].describe())

    fig, axs = plt.subplots(4, 1, figsize=(18, 20))
    sns.boxplot(x=data['Previous_qualification_(grade)'], ax=axs[0], palette='BuGn')
    axs[0].set_title('Previous Qualification Grade', fontsize=14, pad=10)
    sns.boxplot(x=data['Admission_grade'], ax=axs[1], palette='BuGn')
    axs[1].set_title('Admission Grade', fontsize=14, pad=10)
    sns.boxplot(x=data['Curricular_units_1st_sem_(grade)'], ax=axs[2], palette='BuGn')
    axs[2].set_title('1st Semester Grade', fontsize=14, pad=10)
    sns.boxplot(x=data['Curricular_units_2nd_sem_(grade)'], ax=axs[3], palette='BuGn')
    axs[3].set_title('2nd Semester Grade', fontsize=14, pad=10)
    plt.tight_layout()
    st.pyplot(fig)

    st.markdown("*ƒê√£ x·ª≠ l√Ω ngo·∫°i l·ªá b·∫±ng ph∆∞∆°ng ph√°p IQR v√† tr·ª±c quan h√≥a l·∫°i b·∫±ng bi·ªÉu ƒë·ªì h·ªôp.*")
    return data

def section_2(data):
    st.subheader("2. T√¨m m·ªëi quan h·ªá gi·ªØa c√°c y·∫øu t·ªë")

    st.markdown("### M·ªëi t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn s·ªë li√™n t·ª•c")
    data_num = data.select_dtypes(include=['float64'])
    cor = data_num.corr()
    fig, ax = plt.subplots(figsize=(12, 7))
    sns.heatmap(cor, annot=True, cmap=plt.cm.CMRmap_r, ax=ax)
    ax.set_title('M·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn ng·∫´u nhi√™n li√™n t·ª•c')
    st.pyplot(fig)

    st.markdown("""
    T·ª´ bi·ªÉu ƒë·ªì tr√™n, c√≥ th·ªÉ quan s√°t th·∫•y:
    - `Curricular_units_1st_sem_(grade)` v√† `Curricular_units_2nd_sem_(grade)` c√≥ m·ªëi t∆∞∆°ng quan ch·∫∑t ch·∫Ω.
    - `Previous_qualification_(grade)` v√† `Admission_grade` c√≥ m·ªëi t∆∞∆°ng quan trung b√¨nh.
    - GDP, t·ª∑ l·ªá l·∫°m ph√°t v√† t·ª∑ l·ªá th·∫•t nghi·ªáp c√≥ m·ªëi quan h·ªá ti√™u c·ª±c v·ªõi c√°c y·∫øu t·ªë kh√°c.
    """)

def section_3(data):
    st.subheader("3. Ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa t·ª´ng bi·∫øn ph√¢n lo·∫°i l√™n bi·∫øn Target")

    st.markdown("""
    Ph√¢n t√≠ch s·ª± ph√¢n ph·ªëi c·ªßa bi·∫øn m·ª•c ti√™u `Target` theo c√°c y·∫øu t·ªë ph√¢n lo·∫°i nh∆∞:
    - H√¨nh th·ª©c h·ªçc (ban ng√†y/t·ªëi)
    - T√¨nh tr·∫°ng ƒë√≥ng h·ªçc ph√≠ ƒë√∫ng h·∫°n
    - Gi·ªõi t√≠nh
    - T√¨nh tr·∫°ng di c∆∞
    - N·ª£ h·ªçc ph√≠
    - T√¨nh tr·∫°ng nh·∫≠n h·ªçc b·ªïng
    """)

    fig, ax = plt.subplots(2, 3, figsize=(40, 30))
    sns.countplot(x='Daytime/evening_attendance\t', hue='Target', data=data, palette='Set2', ax=ax[0][0])
    sns.countplot(x='Tuition_fees_up_to_date', hue='Target', data=data, palette='Set2', ax=ax[0][1])
    sns.countplot(x='Gender', hue='Target', data=data, palette='Set2', ax=ax[0][2])
    sns.countplot(x='Displaced', hue='Target', data=data, palette='Set2', ax=ax[1][0])
    sns.countplot(x='Debtor', hue='Target', data=data, palette='Set2', ax=ax[1][1])
    sns.countplot(x='Scholarship_holder', hue='Target', data=data, palette='Set2', ax=ax[1][2])
    st.pyplot(fig)

    st.markdown("""
    **Nh·∫≠n x√©t:**

    1. Nh·ªØng sinh vi√™n **kh√¥ng n·ªôp h·ªçc ph√≠ ƒë√∫ng h·∫°n** c√≥ t·ª∑ l·ªá b·ªè h·ªçc cao r√µ r·ªát.
    2. **Nam sinh** c√≥ xu h∆∞·ªõng b·ªè h·ªçc nhi·ªÅu h∆°n n·ªØ sinh.
    3. Sinh vi√™n **m·∫Øc n·ª£ v·ªõi tr∆∞·ªùng** c√≥ t·ª∑ l·ªá b·ªè h·ªçc cao h∆°n sinh vi√™n kh√¥ng n·ª£.
    4. Sinh vi√™n **kh√¥ng nh·∫≠n h·ªçc b·ªïng** c√≥ t·ª∑ l·ªá b·ªè h·ªçc cao h∆°n so v·ªõi sinh vi√™n nh·∫≠n h·ªçc b·ªïng.
    5. **Sinh vi√™n h·ªçc ban ng√†y** c√≥ t·ª∑ l·ªá t·ªët nghi·ªáp cao h∆°n ƒë√°ng k·ªÉ so v·ªõi h·ªçc bu·ªïi t·ªëi.
    """)


def section_4(data):
    st.subheader("4. Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa ƒëi·ªÉm s·ªë v√† t·ª∑ l·ªá b·ªè h·ªçc")

    st.markdown("### X√°c ƒë·ªãnh c√°c bi·∫øn ƒëi·ªÉm s·ªë")
    score_cols = ['Previous_qualification_(grade)', 'Admission_grade',
                'Curricular_units_1st_sem_(grade)', 'Curricular_units_2nd_sem_(grade)']
    st.markdown("""
    Trong dataset, c√°c bi·∫øn li√™n quan ƒë·∫øn ƒëi·ªÉm s·ªë g·ªìm:

    - `Previous_qualification_(grade)` (0-200)
    - `Admission_grade` (0-200)
    - `Curricular_units_1st_sem_(grade)` (0-20)
    - `Curricular_units_2nd_sem_(grade)` (0-20)
    """)

    le = LabelEncoder()
    data['Target'] = le.fit_transform(data['Target'])
    data_num = data.select_dtypes(include=['float64', 'int64'])
    data_num['Target'] = data['Target']

    st.markdown("### Ki·ªÉm ƒë·ªãnh ANOVA")
    st.markdown("""
    - H‚ÇÄ: Kh√¥ng c√≥ s·ª± kh√°c bi·ªát trung b√¨nh ƒëi·ªÉm s·ªë gi·ªØa c√°c nh√≥m Target (kh√¥ng ·∫£nh h∆∞·ªüng).
    - H‚ÇÅ: C√≥ s·ª± kh√°c bi·ªát trung b√¨nh ƒëi·ªÉm s·ªë gi·ªØa c√°c nh√≥m Target (c√≥ ·∫£nh h∆∞·ªüng).

    *N·∫øu p-value < 0.05 ‚Üí B√°c b·ªè H‚ÇÄ ‚Üí ƒêi·ªÉm s·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc.*
    """)

    p_values = {}
    for col in score_cols:
        group0 = data_num[data_num['Target'] == 0][col]
        group1 = data_num[data_num['Target'] == 1][col]
        group2 = data_num[data_num['Target'] == 2][col]
        _, p_val = f_oneway(group0, group1, group2)
        p_values[col] = p_val

    p_series = pd.Series(p_values).sort_values()
    st.write("**üìã B·∫£ng p-value cho t·ª´ng bi·∫øn ƒëi·ªÉm s·ªë:**")
    for feature, p in p_series.items():
        st.write(f"{feature:<45}: {p:.10f}")

    st.markdown("""
    *T·∫•t c·∫£ c√°c bi·∫øn ƒë·ªÅu c√≥ p-value < 0.05 ‚Üí ƒêi·ªÉm s·ªë c√≥ ·∫£nh h∆∞·ªüng r√µ r·ªát ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc.*
    """)

    st.markdown("### Ph√¢n t√≠ch ph√¢n ph·ªëi ƒëi·ªÉm s·ªë theo Target")
    for col in score_cols:
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.histplot(data=data_num, x=col, hue='Target', kde=True, element="step", ax=ax)
        ax.set_title(f'Ph√¢n ph·ªëi {col} theo Target')
        st.pyplot(fig)

        if col == 'Previous_qualification_(grade)':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1.   Sinh vi√™n t·ªët nghi·ªáp c√≥ ƒëi·ªÉm n·ªÅn t·∫£ng cao h∆°n sinh vi√™n b·ªè h·ªçc r√µ r·ªát, ch·ªß y·∫øu t·∫≠p trung tr√™n 130 ƒëi·ªÉm.
            2.   Sinh vi√™n b·ªè h·ªçc c√≥ ƒëi·ªÉm n·ªÅn t·∫£ng th·∫•p h∆°n, ƒëa ph·∫ßn t·∫≠p trung d∆∞·ªõi 130 ƒëi·ªÉm.
            3.   ƒêi·ªÉm s·ªë n·ªÅn t·∫£ng c√†ng cao th√¨ kh·∫£ nƒÉng t·ªët nghi·ªáp c√†ng cao.
            """)
        elif col == 'Admission_grade':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. Sinh vi√™n t·ªët nghi·ªáp th∆∞·ªùng c√≥ ƒëi·ªÉm ƒë·∫ßu v√†o cao h∆°n sinh vi√™n b·ªè h·ªçc.
            2. Tuy nhi√™n, v·∫´n c√≥ s·ª± ch·ªìng l·∫•n ‚Äî ƒëi·ªÉm cao v·∫´n c√≥ th·ªÉ b·ªè h·ªçc.
            3. ƒêi·ªÉm ƒë·∫ßu v√†o l√† y·∫øu t·ªë quan tr·ªçng nh∆∞ng kh√¥ng quy·∫øt ƒë·ªãnh duy nh·∫•t.
            """)
        elif col == 'Curricular_units_1st_sem_(grade)':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. Tr√™n 80% sinh vi√™n t·ªët nghi·ªáp c√≥ ƒëi·ªÉm h·ªçc k·ª≥ 1 > 12.
            2. Kho·∫£ng 65% sinh vi√™n b·ªè h·ªçc c√≥ ƒëi·ªÉm t·ª´ 10‚Äì12.
            3. ƒêi·ªÉm d∆∞·ªõi 11 c√≥ nguy c∆° b·ªè h·ªçc cao.
            """)
        elif col == 'Curricular_units_2nd_sem_(grade)':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. H∆°n 90% sinh vi√™n t·ªët nghi·ªáp c√≥ ƒëi·ªÉm h·ªçc k·ª≥ 2 tr√™n 12.
            2. Sinh vi√™n b·ªè h·ªçc t·∫≠p trung ·ªü m·ª©c 10‚Äì12, r·∫•t √≠t sinh vi√™n b·ªè h·ªçc ƒë·∫°t tr√™n 13 ƒëi·ªÉm.
            """)

    st.markdown("### Ph√¢n t√≠ch chi ti·∫øt trung b√¨nh theo nh√≥m")
    means = data_num.groupby('Target')[score_cols].mean()
    st.dataframe(means)
    st.markdown("""
    **Nh·∫≠n x√©t:**
    - Trung b√¨nh ƒëi·ªÉm c·ªßa nh√≥m sinh vi√™n t·ªët nghi·ªáp cao h∆°n r√µ r·ªát so v·ªõi nh√≥m sinh vi√™n b·ªè h·ªçc.
    """)

def section_5(data):
    st.subheader("5. Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa h·ªó tr·ª£ t√†i ch√≠nh v√† t·ª∑ l·ªá b·ªè h·ªçc")

    st.markdown("""
    ### X√°c ƒë·ªãnh c√°c bi·∫øn t√†i ch√≠nh
    - `Tuition_fees_up_to_date`: ƒê√≥ng h·ªçc ph√≠ ƒë√∫ng h·∫°n (0: Kh√¥ng, 1: C√≥)
    - `Scholarship_holder`: Nh·∫≠n h·ªçc b·ªïng (0: Kh√¥ng, 1: C√≥)
    - `Debtor`: C√≥ n·ª£ v·ªõi tr∆∞·ªùng (0: Kh√¥ng, 1: C√≥)

    ### Ki·ªÉm ƒë·ªãnh Chi-Square
    - H‚ÇÄ: Kh√¥ng c√≥ m·ªëi quan h·ªá gi·ªØa bi·∫øn t√†i ch√≠nh v√† kh·∫£ nƒÉng b·ªè h·ªçc.
    - H‚ÇÅ: C√≥ m·ªëi quan h·ªá gi·ªØa bi·∫øn t√†i ch√≠nh v√† kh·∫£ nƒÉng b·ªè h·ªçc.
                
    *N·∫øu p-value < 0.05 ‚Üí b√°c b·ªè H‚ÇÄ ‚Üí bi·∫øn t√†i ch√≠nh c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn b·ªè h·ªçc.*
    """)

    financial_vars = ['Tuition_fees_up_to_date', 'Scholarship_holder', 'Debtor']
    target_binary = (data['Target'] == 0).astype(int)

    p_values = {}
    for feature in financial_vars:
        table = pd.crosstab(data[feature], target_binary)
        _, p, _, _ = chi2_contingency(table)
        p_values[feature] = p

    p_series = pd.Series(p_values).sort_values()
    st.write("**üìã B·∫£ng p-value cho t·ª´ng bi·∫øn t√†i ch√≠nh:**")
    for feature, p in p_series.items():
        st.write(f"{feature:<30}: {p:.10f}")

    st.markdown("""
    *T·∫•t c·∫£ c√°c bi·∫øn ƒë·ªÅu c√≥ p-value < 0.05 ‚Üí T√†i ch√≠nh c√≥ ·∫£nh h∆∞·ªüng r√µ r·ªát ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc.*
    """)

    st.markdown("### Ph√¢n t√≠ch ƒë∆°n bi·∫øn")
    for col in financial_vars:
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.countplot(x=col, hue='Target', data=data, ax=ax)
        ax.set_title(f'T·ª∑ l·ªá b·ªè h·ªçc theo {col}')
        st.pyplot(fig)

        if col == 'Tuition_fees_up_to_date':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. Sinh vi√™n kh√¥ng ƒë√≥ng h·ªçc ph√≠ ƒë√∫ng h·∫°n c√≥ t·ª∑ l·ªá b·ªè h·ªçc >60%.
            2. Trong khi sinh vi√™n ƒë√≥ng ƒë√∫ng h·∫°n ch·ªâ <20% b·ªè h·ªçc.
            """)
        elif col == 'Scholarship_holder':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. G·∫ßn 35% sinh vi√™n kh√¥ng c√≥ h·ªçc b·ªïng b·ªè h·ªçc.
            2. Trong khi ch·ªâ kho·∫£ng 10% sinh vi√™n c√≥ h·ªçc b·ªïng b·ªè h·ªçc.
            """)
        elif col == 'Debtor':
            st.markdown("""
            **Nh·∫≠n x√©t:**
            1. Sinh vi√™n m·∫Øc n·ª£ c√≥ t·ª∑ l·ªá b·ªè h·ªçc >50%.
            2. Kh√¥ng n·ª£ th√¨ t·ª∑ l·ªá ch·ªâ kho·∫£ng 30%.
            """)

    st.markdown("### Ph√¢n t√≠ch ƒëa bi·∫øn (k·∫øt h·ª£p c√°c y·∫øu t·ªë)")
    st.write("T·ª∑ l·ªá b·ªè h·ªçc khi k·∫øt h·ª£p 3 y·∫øu t·ªë t√†i ch√≠nh:")
    crosstab = pd.crosstab(
        index=[data['Tuition_fees_up_to_date'], data['Scholarship_holder'], data['Debtor']],
        columns=data['Target'],
        normalize='index'
    )
    dropout_rates = crosstab.iloc[:, 0].sort_values(ascending=False) * 100
    dropout_df = pd.DataFrame(dropout_rates).reset_index()
    dropout_df.columns = ['ƒê√≥ng h·ªçc ph√≠', 'H·ªçc b·ªïng', 'N·ª£', 'T·ª∑ l·ªá b·ªè h·ªçc']
    st.dataframe(dropout_df)

    st.markdown("""
    **Nh·∫≠n x√©t:**
    1. Kh√¥ng ƒë√≥ng h·ªçc ph√≠ + kh√¥ng h·ªçc b·ªïng + c√≥ n·ª£ ‚Üí nguy c∆° b·ªè h·ªçc cao nh·∫•t.
    """)

    st.markdown("### Tr·ª±c quan h√≥a v·ªõi Heatmap")
    heatmap_data = data.groupby(['Tuition_fees_up_to_date', 'Scholarship_holder'])['Target'].apply(lambda x: (x == 0).mean()).reset_index()
    heatmap_pivot = heatmap_data.pivot(index="Tuition_fees_up_to_date", columns="Scholarship_holder", values="Target")

    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(heatmap_pivot, annot=True, fmt=".2f", cmap="YlOrRd", vmin=0, vmax=0.5, ax=ax)
    ax.set_title('T·ª∑ l·ªá b·ªè h·ªçc theo H·ªçc ph√≠ v√† H·ªçc b·ªïng')
    ax.set_xlabel('H·ªçc b·ªïng (1: C√≥, 0: Kh√¥ng)')
    ax.set_ylabel('ƒê√≥ng h·ªçc ph√≠ ƒë√∫ng h·∫°n (1: C√≥, 0: Kh√¥ng)')
    st.pyplot(fig)

    st.markdown("""
    **Nh·∫≠n x√©t:**
    1. Kh√¥ng ƒë√≥ng h·ªçc ph√≠ + kh√¥ng h·ªçc b·ªïng ‚Üí T·ª∑ l·ªá b·ªè h·ªçc cao nh·∫•t.
    2. ƒê√≥ng h·ªçc ph√≠ + c√≥ h·ªçc b·ªïng ‚Üí T·ª∑ l·ªá b·ªè h·ªçc th·∫•p nh·∫•t.
    """)

def section_6(data):
    st.subheader("6. T√¨m hi·ªÉu s·ª± ·∫£nh h∆∞·ªüng c·ªßa m√¥i tr∆∞·ªùng x√£ h·ªôi ƒë·∫øn k·∫øt qu·∫£ h·ªçc t·∫≠p c·ªßa sinh vi√™n")

    st.markdown("""
    ### X√°c ƒë·ªãnh c√°c bi·∫øn m√¥i tr∆∞·ªùng x√£ h·ªôi
    C√°c y·∫øu t·ªë li√™n quan g·ªìm:
    - Ngh·ªÅ nghi·ªáp cha m·∫π
    - Tr√¨nh ƒë·ªô h·ªçc v·∫•n cha m·∫π
    - Qu·ªëc t·ªãch
    - T√¨nh tr·∫°ng di c∆∞ 
    
    ### Gi·∫£ thuy·∫øt ki·ªÉm ƒë·ªãnh:
    - H‚ÇÄ: Kh√¥ng c√≥ m·ªëi li√™n h·ªá gi·ªØa bi·∫øn x√£ h·ªôi v√† kh·∫£ nƒÉng b·ªè h·ªçc.
    - H‚ÇÅ: C√≥ m·ªëi li√™n h·ªá gi·ªØa bi·∫øn x√£ h·ªôi v√† kh·∫£ nƒÉng b·ªè h·ªçc.
                
    *N·∫øu p-value < 0.05 ‚Üí b√°c b·ªè H‚ÇÄ ‚Üí Bi·∫øn x√£ h·ªôi c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc.*
    """)

    social_vars = [
        "Mother's_occupation", "Father's_occupation",
        "Mother's_qualification", "Father's_qualification",
        'Nacionality', 'Displaced'
    ]
    target_binary = (data['Target'] == 0).astype(int)

    p_values_social = {}
    for feature in social_vars:
        table = pd.crosstab(data[feature], target_binary)
        _, p, _, _ = chi2_contingency(table)
        p_values_social[feature] = p

    p_series = pd.Series(p_values_social).sort_values()
    st.write("**üìã B·∫£ng p-value cho t·ª´ng bi·∫øn x√£ h·ªôi:**")
    for feature, p in p_series.items():
        st.write(f"{feature:<30}: {p:.10f}")

    st.markdown("### ƒê√°nh gi√° √Ω nghƒ©a th·ªëng k√™")
    significance_level = 0.05
    irrelevant_cols = []
    for feature in p_series.index:
        if p_series[feature] <= significance_level:
            st.write(f"{feature:<30} ==> ‚ùå B√°c b·ªè H‚ÇÄ (c√≥ li√™n quan ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc)")
        else:
            st.write(f"{feature:<30} ==> ‚úÖ Kh√¥ng b√°c b·ªè H‚ÇÄ (kh√¥ng li√™n quan)")
            irrelevant_cols.append(feature)

    st.markdown("**C√°c bi·∫øn x√£ h·ªôi kh√¥ng c√≥ √Ω nghƒ©a th·ªëng k√™ v√† c√≥ th·ªÉ lo·∫°i b·ªè n·∫øu c·∫ßn:**")
    if irrelevant_cols:
        st.write(irrelevant_cols)
    else:
        st.write("T·∫•t c·∫£ c√°c bi·∫øn x√£ h·ªôi ƒë·ªÅu c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng b·ªè h·ªçc.")
    
    st.markdown("### Bi·ªÉu ƒë·ªì tr·ª±c quan t·ª´ng bi·∫øn x√£ h·ªôi")
    for feature in social_vars:
        if feature != 'Nacionality':
            fig, ax = plt.subplots(figsize=(10, 4))
            sns.countplot(x=feature, hue='Target', data=data, ax=ax)
            plt.xticks(rotation=45)
            ax.set_title(f'T·ª∑ l·ªá b·ªè h·ªçc theo {feature}')
            st.pyplot(fig)  

    st.markdown("""
    **Nh·∫≠n x√©t t·ªïng quan:**
    - Tr√¨nh ƒë·ªô h·ªçc v·∫•n v√† ngh·ªÅ nghi·ªáp c·ªßa cha m·∫π c√≥ li√™n quan ƒë·∫øn t·ª∑ l·ªá b·ªè h·ªçc.
    - Sinh vi√™n kh√¥ng di c∆∞ c√≥ kh·∫£ nƒÉng t·ªët nghi·ªáp cao h∆°n.
    """)

def section_7():
    st.subheader("7. ƒê·ªÅ xu·∫•t c√°c bi·ªán ph√°p gi·∫£m thi·ªÉu t·ª∑ l·ªá b·ªè h·ªçc")

    st.markdown("""
    ### D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch ·ªü c√°c ph·∫ßn tr∆∞·ªõc, m·ªôt s·ªë bi·ªán ph√°p c·ª• th·ªÉ c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t nh∆∞ sau:

    #### 1. H·ªó tr·ª£ t√†i ch√≠nh
    - **TƒÉng c∆∞·ªùng c·∫•p h·ªçc b·ªïng** cho sinh vi√™n c√≥ nguy c∆° cao (d·ª±a v√†o ƒëi·ªÉm ƒë·∫ßu v√†o v√† ho√†n c·∫£nh).
    - **Nh·∫Øc nh·ªü v√† h·ªó tr·ª£ ƒë√≥ng h·ªçc ph√≠ ƒë√∫ng h·∫°n**, ƒë·ªìng th·ªùi thi·∫øt l·∫≠p c√°c ch√≠nh s√°ch gi√£n n·ª£ cho sinh vi√™n c√≥ kh√≥ khƒÉn t√†i ch√≠nh.

    #### 2. H·ªó tr·ª£ h·ªçc t·∫≠p
    - **T∆∞ v·∫•n h·ªçc thu·∫≠t** v√† **h·ªó tr·ª£ th√™m** cho sinh vi√™n c√≥ ƒëi·ªÉm th·∫•p trong nƒÉm ƒë·∫ßu ti√™n.
    - T·ªï ch·ª©c c√°c bu·ªïi **k√®m c·∫∑p h·ªçc t·∫≠p** (mentoring) gi·ªØa sinh vi√™n nƒÉm tr√™n v√† nƒÉm d∆∞·ªõi.

    #### 3. Quan t√¢m y·∫øu t·ªë x√£ h·ªôi v√† c√° nh√¢n
    - Theo d√µi sinh vi√™n thu·ªôc nh√≥m c√≥ **gia ƒë√¨nh √≠t h·ªçc**, **cha m·∫π th·∫•t nghi·ªáp** ho·∫∑c **di c∆∞** ƒë·ªÉ c√≥ ch√≠nh s√°ch h·ªó tr·ª£ ri√™ng.
    - M·ªü r·ªông d·ªãch v·ª• **tham v·∫•n t√¢m l√Ω v√† h∆∞·ªõng nghi·ªáp** t·∫°i tr∆∞·ªùng.

    #### 4. Theo d√µi s·ªõm v√† c·∫£nh b√°o s·ªõm
    - X√¢y d·ª±ng h·ªá th·ªëng **ph√°t hi·ªán s·ªõm sinh vi√™n c√≥ nguy c∆° b·ªè h·ªçc** d·ª±a tr√™n m√¥ h√¨nh h·ªçc m√°y.
    - K·∫øt h·ª£p c√°c y·∫øu t·ªë: ƒëi·ªÉm h·ªçc k·ª≥, h·ªçc ph√≠, h·ªçc b·ªïng, n·ª£, v√† d·ªØ li·ªáu x√£ h·ªôi ƒë·ªÉ **x√¢y d·ª±ng c·∫£nh b√°o r·ªßi ro b·ªè h·ªçc**.

    #### 5. Ch√≠nh s√°ch gi√°o d·ª•c v√† qu·∫£n l√Ω
    - C·∫£i thi·ªán **ch√≠nh s√°ch linh ho·∫°t h·ªçc t·∫≠p** (cho ph√©p b·∫£o l∆∞u, chuy·ªÉn ƒë·ªïi ng√†nh).
    - TƒÉng c∆∞·ªùng **qu·∫£n l√Ω t∆∞∆°ng t√°c sinh vi√™n - nh√† tr∆∞·ªùng**, ph·∫£n h·ªìi s·ªõm t·ª´ sinh vi√™n v·ªÅ kh√≥ khƒÉn.

    ### K·∫øt lu·∫≠n:
    Vi·ªác gi·∫£m t·ª∑ l·ªá b·ªè h·ªçc c·∫ßn k·∫øt h·ª£p nhi·ªÅu y·∫øu t·ªë: t√†i ch√≠nh, h·ªçc t·∫≠p, t√¢m l√Ω v√† ch√≠nh s√°ch. Ph√¢n t√≠ch d·ªØ li·ªáu ƒë√≥ng vai tr√≤ then ch·ªët gi√∫p x√°c ƒë·ªãnh nh√≥m sinh vi√™n c√≥ nguy c∆° cao v√† ƒë∆∞a ra bi·ªán ph√°p h·ªó tr·ª£ k·ªãp th·ªùi.
    """)

def insight_page():
    st.title("Kh√°m Ph√° D·ªØ Li·ªáu Sinh Vi√™n")
    st.markdown("**Trang n√†y gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ d·ªØ li·ªáu sinh vi√™n v√† c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác b·ªè h·ªçc.**")

    data = load_data()
    data = section_1(data)
    section_2(data)
    section_3(data)
    section_4(data)
    section_5(data)
    section_6(data)
    section_7()

    